<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.1">
  <zoom_level>20</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>300</y>
      <w>960</w>
      <h>1440</h>
    </coordinates>
    <panel_attributes>loyal.level::Level
--
-PIXEL_SCALER = 8: int
+tiles: byte[]
+width: int
+height: int
+entities = new ArrayList&lt;Entity&gt;(): List&lt;Entity&gt;
+music: Sound
-imagePath: String
-image: BufferedImage
-id: int
-decisionMap = new HashMap&lt;String, Decision&gt;(): Map&lt;String, Decision&gt;
+currentDecision: Decision
+hasBeenPlayed = false: boolean
-defaultY: int
-defaultX: int
-exitValuesArray: ArrayList&lt;int[]&gt;
--
+Level(int id, String imagePath, Sound music): ctor
-loadLevelFromFile(): void
-loadTiles(): void
-saveLevelToFile(): void
+alterTile(int x, int y, Tile newTile): void
-generateLevel(): void
+tick(): void
+inputRun(InputHandler input): String
+renderTiles(Screen screen, int xOffset, int yOffset): void
+renderEntities(Screen screen): void
+getTile(int x, int y): Tile
+addEntity(Entity entity): void
+addEntity(int pos, Entity entity): void
+removeEntity(Entity entity): void
+removeEntity(int pos): void
+getEntity(int pos): Entity
+getEntitySize(): int
+spawnNewLevel(): void
+newLevelIdentifier(int x, int y): int
+getId(): int
+setPlayerDefaultX(int X): void
+setPlayerDefaultY(int Y): void
+setExitValues(ArrayList&lt;int[]&gt; exitValuesArray): void
+addExitValueArray(int[] exitValueArray): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>980</x>
      <y>300</y>
      <w>1600</w>
      <h>1340</h>
    </coordinates>
    <panel_attributes>/loyal.level.tiles::Tile/
--
+tiles = new Tile[256]: Tile[]
+VOID = new BasicSolidTile(0, 0, 0, Colors.get(000, -1, -1, -1), 0xFF000000, 1, 1): Tile
+STONE = new BasicSolidTile(1, 1, 0, Colors.get(-1, 333, -1, -1), 0xFF555555, 1, 1): Tile
+GRASS = new BasicTile(2, 2, 0, Colors.get(-1, 131, 141, -1), 0xFF00FF00, 1, 1): Tile
+WATER = new AnimatedTile(3, new int[][] { { 0, 4 }, { 1, 4 }, { 2, 4 } }, Colors.get(-1, 004, 115, -1), 0xFF0000FF, 500, 1, 1): Tile
+ROAD = new BasicTile(4, 5, 0, Colors.get(-1, 300, 400, -1), 0xFFA52A2A, 1, 1): Tile
+WHEAT = new AnimatedTile(5, new int[][] { { 3, 4 }, { 5, 4 } }, Colors.get(-1, 131, 550, -1), 0xFFFFFF00, 700, 1, 1): Tile
+MOUNTAIN1 = new BasicSolidTile(6, 0, 2, Colors.get(020, 110, 020, 555), 0xFFFF0000, 2, 2): Tile
+MOUNTAIN2 = new BasicSolidTile(7, 1, 2, Colors.get(020, 110, 020, 555), 0xFFFF0000, 2, 2): Tile
+MOUNTAIN3 = new BasicSolidTile(8, 2, 2, Colors.get(-1, 110, 020, 555), 0xFFFF0000, 2, 2): Tile
+MOUNTAIN4 = new BasicSolidTile(9, 3, 2, Colors.get(-1, 110, 020, 555), 0xFFFF0000, 2, 2): Tile
+Tree1 = new BasicSolidTile(10, 4, 2, Colors.get(131, 121, 110, 500), 0xFF009600, 2, 2): Tile
+Tree2 = new BasicSolidTile(11, 5, 2, Colors.get(131, 121, 110, 500), 0xFF009600, 2, 2): Tile
+Tree3 = new BasicSolidTile(12, 6, 2, Colors.get(131, 121, 110, 500), 0xFF009600, 2, 2): Tile
+Tree4 = new BasicSolidTile(13, 7, 2, Colors.get(131, 121, 110, 500), 0xFF009600, 2, 2): Tile
+HOUSE = new BasicSolidTile(14, 6, 0, Colors.get(-1, 311, 411, -1), 0xFFD2B48C, 1, 1): Tile
+ROOF = new BasicSolidTile(15, 1, 0, Colors.get(-1, 211, -1, -1), 0xFF310C0C, 1, 1): Tile
+DOOR = new BasicSolidTile(16, 1, 0, Colors.get(-1, 211, -1, -1), 0xFFC73627, 1, 1): Tile
+DOORNOB = new BasicSolidTile(17, 7, 0, Colors.get(211, -1, -1, 555), 0xFFFFA500, 1, 1): Tile
+Boarder = new BasicSolidTile(18, 1, 0, Colors.get(-1, 444, -1, -1), 0xFFc8c8c8, 1, 1): Tile
#id: byte
#solid: boolean
#emitter: boolean
-levelColor: int
#isBig = false: boolean
#width: int
#height: int
--
+Tile(int id, boolean isSolid, boolean isEmitter, int levelColor, int width, int height): ctor
+getId(): byte
+isSolid(): boolean
+isEmitter(): boolean
+getLevelColor(): int
+getWidth(): int
+getHeight(): int
+tick(): void
+render(Screen screen, Level level, int x, int y): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2600</x>
      <y>300</y>
      <w>880</w>
      <h>1100</h>
    </coordinates>
    <panel_attributes>/loyal.Battle.Actions::Ability/
--
#name: String
#description: String
#playingCharacter: PlayingCharacter
#type: CharacterType
#level: int
#baseValue: int
#scaling: double
#perLevel: int
#gen: Random
#abilityType: AbilityType
--
+Ability(PlayingCharacter playingCharacter): ctor
+setValues(int baseValue, int perLevel, double scaling): void
+checkCompability(): void
+castCharacterAction(PlayingCharacter target): void
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
#getTargets(PlayingCharacter target): ArrayList&lt;PlayingCharacter&gt;
#canCastOn(PlayingCharacter target): boolean
+getName(): String
+setName(String name): void
+setDescription(String description): void
+getDescription(): String
+getLevel(): int
+levelUp(): void
+setPlayingCharacter(PlayingCharacter playingCharacter): void
+getBaseValue(): int
+getScalling(): double
+getPerLevel(): int
+getValues(): String
+getAbilityType(): AbilityType
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3500</x>
      <y>300</y>
      <w>520</w>
      <h>960</h>
    </coordinates>
    <panel_attributes>loyal.Utilitys::AStarTile
--
-id: int
-isSolid: boolean
-closed: boolean
-open: boolean
-parent: int
-score: int
-distance: int
-huristic: int
--
+AStarTile(int id, boolean isSolid): ctor
+getId(): int
+setId(int id): void
+isSolid(): boolean
+setSolid(boolean isSolid): void
+isClosed(): boolean
+setClosed(boolean closed): void
+isOpen(): boolean
+setOpen(boolean open): void
+getParent(): int
+setParent(int parent): void
+getScore(): int
+setScore(int score): void
+getDistance(): int
+setDistance(int distance): void
+getHuristic(): int
+setHuristic(int huristic): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4040</x>
      <y>300</y>
      <w>880</w>
      <h>920</h>
    </coordinates>
    <panel_attributes>/loyal.Battle.Characters::PlayingCharacter/
--
-name: String
-targets: ArrayList&lt;PlayingCharacter&gt;
-actions: ArrayList&lt;CharacterAction&gt;
-currentAction: CharacterAction
-allies: ArrayList&lt;PlayingCharacter&gt;
#state: State
-type: CharacterType
--
+PlayingCharacter(String name, CharacterType type): ctor
+getState(): State
+setState(State state): void
+getTargets(): ArrayList&lt;PlayingCharacter&gt;
+setTargets(ArrayList&lt;PlayingCharacter&gt; targets): void
+getActions(): ArrayList&lt;CharacterAction&gt;
+addAction(CharacterAction action): void
+removeActions(ArrayList&lt;CharacterAction&gt; removedActions): void
+setAction(CharacterAction action): void
+getType(): CharacterType
+getAllies(): ArrayList&lt;PlayingCharacter&gt;
+compareTo(PlayingCharacter pi): int
+getCharacterType(): CharacterType
+setType(CharacterType type): void
+getName(): String
+getTartgets(): ArrayList&lt;PlayingCharacter&gt;
+isDead(): boolean
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4940</x>
      <y>300</y>
      <w>1240</w>
      <h>920</h>
    </coordinates>
    <panel_attributes>loyal::Loyal
--
-serialVersionUID = 1L: long
+WIDTH = 500: int
+HEIGHT = 300: int
+SCALE = 2: int
+NAME = "Loyal": String
+tickCount = 0: int
+running = false: boolean
-frame: JFrame
-image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB): BufferedImage
-pixels = ((DataBufferInt) image.getRaster().getDataBuffer()).getData(): int[]
-colors = new int[6 * 6 * 6]: int[]
-screen: Screen
+input: InputHandler
+level: Level
--
+Loyal(): ctor
+init(): void
-colorBasicFill(): void
+start(): void
+stop(): void
+run(): void
-inputRun(): String
+tick(): void
+render(): void
+main(String[] args): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>6200</x>
      <y>300</y>
      <w>1200</w>
      <h>720</h>
    </coordinates>
    <panel_attributes>loyal.entities::MapMoblin
--
-color = Colors.get(-1, 000, 500, 555): int
-scale = 1: int
-tickCount: int
-random = new Random(): Random
#move = 1: int
#stalkDistance: int
#decision: Decision
--
+MapMoblin(Level level, int x, int y, int speed, int stalkDistance): ctor
+hasCollided(int xa, int ya): boolean
-intBattle(): void
-playerCheck(): boolean
+tick(): void
+stalk(int stalkDistance): void
+Pathfinder(Tile[][] tiles, int width): int
+pathScoring(int curr, int tile, AStarTile[] AStarTiles, int distance, int width, int end): AStarTile[]
+lowestScore(AStarTile[] AStarTiles, int curr, int width, int end): int
+render(Screen screen): void
+inputRun(InputHandler input): String
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>7420</x>
      <y>300</y>
      <w>740</w>
      <h>720</h>
    </coordinates>
    <panel_attributes>/loyal.entities::Mob/
--
#name: String
#speed: int
#numSteps = 0: int
#isMoving: boolean
#movingDir = 1: int
#scale = 1: int
#position = 1: int
#direction = 0: int
#isSwimming = false: boolean
#tallGrass = false: boolean
~walkingSpeed = 4: int
--
+Mob(Level level, String name, int x, int y, int speed): ctor
+move(int xa, int ya): void
+hasCollided(int xa, int ya): boolean
#isSolidTile(int xa, int ya, int x, int y): boolean
#isWater(int xa, int ya, int x, int y): boolean
+getName(): String
+tileCheck(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>1760</y>
      <w>1140</w>
      <h>660</h>
    </coordinates>
    <panel_attributes>loyal.entities::Pointer
--
-color = Colors.get(-1, -1, -1, 555): int
-scale = 1: int
-time = 0: long
-curTime: long
-prevTime = System.currentTimeMillis(): long
-jump: int
-start: int
-end: int
-game: Loyal
-menu = new ArrayList&lt;String&gt;(): ArrayList&lt;String&gt;
--
+Pointer(Level level, String name, int x, int y, int jump, int start, int end, Loyal game): ctor
+hasCollided(int xa, int ya): boolean
+tick(): void
+decisionStateChange(): void
+render(Screen screen): void
+inputRun(InputHandler input): String
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1160</x>
      <y>1760</y>
      <w>620</w>
      <h>660</h>
    </coordinates>
    <panel_attributes>loyal.Utilitys::Edge
--
-ID = 0: int
-elem: E
-id: int
-weight: int
-pointers: LinkedList&lt;Vertex&lt;E&gt;&gt;
--
+Edge(): ctor
+Edge(E elem, int distance): ctor
+getId(): int
+getElem(): E
+setElem(E elem): void
+getDistance(): int
+setDistance(int dist): void
+connectTo(Edge&lt;E&gt; other): void
+connectTo(Edge&lt;E&gt; other, int distance): void
+getConnections(): LinkedList&lt;Vertex&lt;E&gt;&gt;
+toString(): String
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1800</x>
      <y>1760</y>
      <w>540</w>
      <h>660</h>
    </coordinates>
    <panel_attributes>loyal.Utilitys::LinkedList
--
#head: Node&lt;E&gt;
#size: int
--
+LinkedList(): ctor
+size(): int
+addFirst(Node&lt;E&gt; v): void
+addLast(Node&lt;E&gt; v): void
+removeFirst(): void
+removeLast(): void
+addAfter(Node&lt;E&gt; u, Node&lt;E&gt; v): void
+addBefore(Node&lt;E&gt; u, Node&lt;E&gt; v): void
+removeAfter(Node&lt;E&gt; v): void
+removeBefore(Node&lt;E&gt; v): void
+remove(Node&lt;E&gt; v): void
+toString(): String
+search(E id): Node&lt;E&gt;
+contains(E id): boolean
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2360</x>
      <y>1760</y>
      <w>1340</w>
      <h>620</h>
    </coordinates>
    <panel_attributes>loyal.Battle::Battle
--
-currentBattle: Battle
-playerWin = 1, playerEscape = 2, computerWin = 3: int
-playersTurn = false: boolean
-playerMenu = new BattleMenu(): BattleController
-AI = new BattleAI(): BattleController
-activePlayers, activeEnemies: ArrayList&lt;PlayingCharacter&gt;
-inactivePlayers, inactiveEnemies: ArrayList&lt;PlayingCharacterCounter&gt;
--
-Battle(ArrayList&lt;PlayingCharacter&gt; activePlayers, ArrayList&lt;PlayingCharacter&gt; activeEnemies): ctor
+startBattle(): int
-startingTurnDecision(): boolean
#checkWinner(): int
-isAlive(ArrayList&lt;PlayingCharacter&gt; characterGroup): int
+setMenu(ArrayList&lt;PlayingCharacter&gt; activePlayers, ArrayList&lt;PlayingCharacter&gt; activeEnemies): void
-checkAliveParty(): void
#getAttack(PlayingCharacter attacker): ArrayList&lt;CharacterAction&gt;
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3720</x>
      <y>1760</y>
      <w>940</w>
      <h>620</h>
    </coordinates>
    <panel_attributes>loyal.entities::MapPlayer
--
-StaminaSize = 2000: int
-color = Colors.get(-1, 200, 020, 321): int
-color2 = Colors.get(-1, 200, 020, 543): int
-scale = 1: int
-tickCount: int
-game: Loyal
-walkingSpeed = 4: int
-stamina = StaminaSize: int
-runCheck = false: boolean
-canRun = true: boolean
--
+MapPlayer(Level level, int x, int y, InputHandler input, Loyal game): ctor
+hasCollided(int xa, int ya): boolean
+tick(): void
+render(Screen screen): void
+inputRun(InputHandler input): String
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4680</x>
      <y>1760</y>
      <w>920</w>
      <h>560</h>
    </coordinates>
    <panel_attributes>loyal.Graphics::Screen
--
+MAP_WIDTH = 64: int
+MAP_WIDTH_MASK = MAP_WIDTH - 1: int
+BIT_MIRROR_X = 0x01: byte
+BIT_MIRROR_Y = 0x02: byte
+pixels: int[]
+xOffset = 0: int
+yOffset = 0: int
+width: int
+height: int
+sheet: SpriteSheet
--
+Screen(int width, int height, SpriteSheet sheet): ctor
+render(int xPos, int yPos, int tile, int color, int mirrorDir, int scale): void
+setOffset(int xOffset, int yOffset): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>5620</x>
      <y>1760</y>
      <w>660</w>
      <h>520</h>
    </coordinates>
    <panel_attributes>loyal::InputHandler
--
+up = new Key(): Key
+down = new Key(): Key
+left = new Key(): Key
+right = new Key(): Key
+enter = new Key(): Key
+escape = new Key(): Key
+shift = new Key(): Key
--
+InputHandler(Loyal game): ctor
+keyPressed(KeyEvent e): void
+keyReleased(KeyEvent e): void
+keyTyped(KeyEvent e): void
+toggleKey(int keyCode, boolean isPressed): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>6300</x>
      <y>1760</y>
      <w>500</w>
      <h>480</h>
    </coordinates>
    <panel_attributes>/loyal.entities::Entity/
--
#x, y: int
#level: Level
--
+Entity(Level level): ctor
+init(Level level): void
+getX(): int
+getY(): int
+tick(): void
+render(Screen screen): void
+inputRun(InputHandler input): String
+setX(int defaultX): void
+setY(int defaultY): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>6820</x>
      <y>1760</y>
      <w>640</w>
      <h>480</h>
    </coordinates>
    <panel_attributes>loyal.entities::NPCMen
--
-color = Colors.get(-1, 211, 002, 543): int
-color2 = Colors.get(-1, 211, 411, 543): int
-scale = 1: int
-tickCount: int
-random = new Random(): Random
#move = 5: int
--
+NPCMen(Level level, int x, int y, int speed): ctor
+hasCollided(int xa, int ya): boolean
+tick(): void
+render(Screen screen): void
+inputRun(InputHandler input): String
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>7480</x>
      <y>1760</y>
      <w>1200</w>
      <h>480</h>
    </coordinates>
    <panel_attributes>loyal::LevelInitializer
--
+levels = new Level[100]: Level[]
+VILLAGE = new Level(1, "/Levels/HomeVillage.png", Sound.VillageMusic): Level
+OVERWORLD = new Level(2, "/Levels/OverWorldMap.png", Sound.OverWorldMusic): Level
+STARTMENU = new Level(3, "/Levels/test_menu.png", Sound.MenuMusic): Level
+BATTLE = new Level(4, "/Levels/BattleMap.png", Sound.BattleMusic): Level
-game: Loyal
--
+LevelInitializer(Loyal game): ctor
+initLeveValues(): void
-addMonsters(): void
-startMenuCreation(): void
-villageNPCCreation(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>2440</y>
      <w>880</w>
      <h>480</h>
    </coordinates>
    <panel_attributes>loyal::Sound
--
-clip: Clip
+MenuMusic = new Sound("/music/TheLegend.wav"): Sound
+VillageMusic = new Sound("/music/LittleDropofPeace.wav"): Sound
+OverWorldMusic = new Sound("/music/Loyalty.wav"): Sound
+VictoryMusic = new Sound("/music/VictoryFanfare.wav"): Sound
+BattleMusic = new Sound("/music/PointZero.wav"): Sound
--
+Sound(String fileName): ctor
+play(): void
+stop(): void
+loop(): void
+isActive(): boolean
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>900</x>
      <y>2440</y>
      <w>720</w>
      <h>480</h>
    </coordinates>
    <panel_attributes>loyal.Utilitys::Vertex
--
-one, two: Edge&lt;E&gt;
-distance: int
--
+Vertex(Edge&lt;E&gt; one, Edge&lt;E&gt; two): ctor
+Vertex(Edge&lt;E&gt; one, Edge&lt;E&gt; two, int distance): ctor
+getOne(): Edge&lt;E&gt;
+getTwo(): Edge&lt;E&gt;
+getDistance(): int
+setDistance(int distance): void
+equals(Vertex&lt;E&gt; other): boolean
+toString(): String
+compareTo(Vertex&lt;E&gt; other): int
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1640</x>
      <y>2440</y>
      <w>1440</w>
      <h>460</h>
    </coordinates>
    <panel_attributes>loyal.Battle::BattleMenu
--
-temp: Level
-player = null: PlayingCharacter
-attacks = null: ArrayList&lt;CharacterAction&gt;
-target = null: ArrayList&lt;PlayingCharacter&gt;
-attack = null: CharacterAction
--
+setMenu(Level menu): void
+tick(ArrayList&lt;PlayingCharacter&gt; activePlayers, ArrayList&lt;PlayingCharacter&gt; activeEnemies): void
-getAttack(ArrayList&lt;CharacterAction&gt; attacks): CharacterAction
+updateBattleView(ArrayList&lt;PlayingCharacter&gt; activePlayers, ArrayList&lt;PlayingCharacter&gt; activeEnemies): void
+getIndex(ArrayList&lt;PlayingCharacter&gt; display): int
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3100</x>
      <y>2440</y>
      <w>1040</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::ClericAbilityFactory
--
#lightningSpear: LightningSpearOffensiveSingleTarget
#magicBarrier: MagicBarrierDefensiveSingleTargetAbility
#sacredOath: SacredOathMultiTargetDefensiveAbility
#sootingSunlight: SootingSunlightDefensiveSingleTargetAbility
#playingCharacter: PlayingCharacter
--
+ClericAbilityFactory(): ctor
+createCharacterAction(String name, PlayingCharacter playingCharacter): Ability
+displayAbilitiesBasedOnType(): String[]
+printListOfAbilities(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4160</x>
      <y>2440</y>
      <w>1040</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::HunterAbilityFactory
--
#arrowRain: ArrowRainMultiTargetOffensiveAbility
#sharpShot: SharpShotOffensiveSingleTargetAbility
#sharpEye: SharpEyeDefensiveSingleTargetAbility
#poisonousStab: PoisonousStabMultiTargetOffensiveAbility
#playingCharacter: PlayingCharacter
--
+HunterAbilityFactory(): ctor
+createCharacterAction(String name, PlayingCharacter playingCharacter): Ability
+displayAbilitiesBasedOnType(): String[]
+printListOfAbilities(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>5220</x>
      <y>2440</y>
      <w>1040</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::WizzardAbilityFactory
--
#darkOrb: DarkOrbOffensiveSingleTargetAbility
#soulArrow: SoulArrowOffensiveSingleTarget
#soulShower: SoulShowerMultiTargetOffensiveAbility
#magicShield: MagicShieldDefensiveSingleTargetAbility
#playingCharacter: PlayingCharacter
--
+WizzardAbilityFactory(): ctor
+createCharacterAction(String name, PlayingCharacter playingCharacter): Ability
+displayAbilitiesBasedOnType(): String[]
+printListOfAbilities(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>6280</x>
      <y>2440</y>
      <w>1120</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::WorrierAbilityFactory
--
#airSlash: AirSlashSingleTargetOffenSiveAbility
#backSlash: BackSlashSingleTargetOffenSiveAbility
#taunt: TauntSingleTargetDefenSiveAbility
#desperateMove: DesperateMoveMultiTargetOffensiveAbility
#playingCharacter: PlayingCharacter
--
+WorrierAbilityFactory(): ctor
+createCharacterAction(String abilityName, PlayingCharacter playingCharacter): Ability
+displayAbilitiesBasedOnType(): String[]
+printListOfAbilities(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>7420</x>
      <y>2440</y>
      <w>960</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>loyal.level::LevelGenerator
--
~generator: LevelGenerator
~level: Level
~entities: ArrayList&lt;Entity&gt;
--
-LevelGenerator(): ctor
+getLevelGenerator(Level level, ArrayList&lt;Entity&gt; entities): LevelGenerator
+getLevel(): Level
+setLevel(Level level): void
+setEntity(ArrayList&lt;Entity&gt; entities): void
+putEntity(Level current): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>2940</y>
      <w>1440</w>
      <h>380</h>
    </coordinates>
    <panel_attributes>loyal.Battle::BattleAI
--
-temp: Level
-player = null: PlayingCharacter
-attacks = null: ArrayList&lt;CharacterAction&gt;
-target = null: ArrayList&lt;PlayingCharacter&gt;
-attack = null: CharacterAction
--
+setMenu(Level menu): void
+tick(ArrayList&lt;PlayingCharacter&gt; activePlayers, ArrayList&lt;PlayingCharacter&gt; activeEnemies): void
+updateBattleView(ArrayList&lt;PlayingCharacter&gt; activePlayers, ArrayList&lt;PlayingCharacter&gt; activeEnemies): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1460</x>
      <y>2940</y>
      <w>580</w>
      <h>380</h>
    </coordinates>
    <panel_attributes>/loyal.Battle.Characters::ModifyingItem/
--
#innerState: State
#modifiedStateArray: double[]
-name: String
--
+ModifyingItem(State innerState): ctor
+getStat(Stat statChoice): double
+setStat(Stat statChoice, double value): void
+getCurrentStatus(): double[]
+undecorate(String name): State
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2060</x>
      <y>2940</y>
      <w>460</w>
      <h>380</h>
    </coordinates>
    <panel_attributes>loyal.level::EdgeCollisionDecision
--
-game: Loyal
-entityWatchedX: int
-entityWatchedY: int
-levelWatched: Level
-input: InputHandler
--
+update(): void
+setGame(Loyal game): void
+sync(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2540</x>
      <y>2940</y>
      <w>560</w>
      <h>380</h>
    </coordinates>
    <panel_attributes>loyal.level::EnterBattle
--
-game: Loyal
-pointer: Pointer
-battleCharacter: BattleCharacters
~color = Colors.get(111, 222, 333, 444): int
--
+update(): void
+setGame(Loyal game): void
+sync(): void
-addBattleParticipants(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3120</x>
      <y>2940</y>
      <w>480</w>
      <h>380</h>
    </coordinates>
    <panel_attributes>loyal.Utilitys::Node
--
-value: E
-next: Node&lt;E&gt;
--
+Node(): ctor
+Node(E value, Node&lt;E&gt; next): ctor
+getValue(): E
+getNext(): Node&lt;E&gt;
+setValue(E value): void
+setNext(Node&lt;E&gt; next): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3620</x>
      <y>2940</y>
      <w>700</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>loyal.Battle::PlayingCharacterCounter
--
-cur: PlayingCharacter
-turn: int
--
+PlayingCharacterCounter(PlayingCharacter cur): ctor
+getCharacter(): PlayingCharacter
+decrementTurn(): void
+getTurn(): int
+compareTo(Object arg0): int
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4340</x>
      <y>2940</y>
      <w>760</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>loyal.entities::BattleCharacters
--
-tickCount = 0: int
-scale = 1: int
~colors: int[]
--
+BattleCharacters(Level level, int x, int y, int[] colors): ctor
+tick(): void
+render(Screen screen): void
+inputRun(InputHandler input): String
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>5120</x>
      <y>2940</y>
      <w>500</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>loyal.Utilitys::Graph
--
-edges: ArrayList&lt;Edge&lt;E&gt;&gt;
--
+Graph(): ctor
+addEdge(Edge&lt;E&gt; vertex): boolean
+contains(Edge&lt;E&gt; vertex): boolean
+get(int index): Edge&lt;E&gt;
+count(): int
+equals(Graph&lt;E&gt; other): boolean
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>5640</x>
      <y>2940</y>
      <w>1960</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Characters::Arms
--
-value = 2: int
-Heal = Stat.HEALTH, Man = Stat.MANA, Str = Stat.STRENGTH, MPower = Stat.MAGICPOWER, Arm = Stat.ARMOR, MResist = Stat.MAGICRESIST: Stat
--
+Arms(State innerState): ctor
+unSetModified(): void
+setModified(): void
+setStat(Stat health, double currentHealth): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>7620</x>
      <y>2940</y>
      <w>1960</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Characters::Boots
--
-value = 2: int
-Heal = Stat.HEALTH, Man = Stat.MANA, Str = Stat.STRENGTH, MPower = Stat.MAGICPOWER, Arm = Stat.ARMOR, MResist = Stat.MAGICRESIST: Stat
--
+Boots(State innerState): ctor
+unSetModified(): void
+setModified(): void
+setStat(Stat health, double currentHealth): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>3340</y>
      <w>640</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Characters::Bow
--
-value = 2: int
-Str = Stat.STRENGTH: Stat
--
+Bow(State innerState): ctor
+unSetModified(): void
+setModified(): void
+setStat(Stat health, double currentHealth): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>660</x>
      <y>3340</y>
      <w>640</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Characters::CharacterState
--
-stateArray = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 }: double[]
--
+setStat(Stat stat, int value): void
+getStat(Stat defensiveStat): double
+getCurrentStatus(): double[]
+undecorate(String name): State
+setStat(Stat someStat, double value): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1320</x>
      <y>3340</y>
      <w>1960</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Characters::Chest
--
-value = 6: int
-Heal = Stat.HEALTH, Man = Stat.MANA, Str = Stat.STRENGTH, MPower = Stat.MAGICPOWER, Arm = Stat.ARMOR, MResist = Stat.MAGICRESIST: Stat
--
+Chest(State innerState): ctor
+unSetModified(): void
+setModified(): void
+setStat(Stat health, double currentHealth): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3300</x>
      <y>3340</y>
      <w>1960</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Characters::Helmet
--
-value = 5: int
-Heal = Stat.HEALTH, Man = Stat.MANA, Str = Stat.STRENGTH, MPower = Stat.MAGICPOWER, Arm = Stat.ARMOR, MResist = Stat.MAGICRESIST: Stat
--
+Helmet(State innerState): ctor
+unSetModified(): void
+setModified(): void
+setStat(Stat health, double currentHealth): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>5280</x>
      <y>3340</y>
      <w>740</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>loyal.Battle::Party
--
~inventory: ArrayList&lt;String&gt;
~players, activePlayers: ArrayList&lt;PlayingCharacter&gt;
--
+Party(ArrayList&lt;PlayingCharacter&gt; activePlayers): ctor
-addItem(String item): void
-removeItem(String item): void
+countParty(): int
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>6040</x>
      <y>3340</y>
      <w>820</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>loyal.entities::MenuItems
--
-words: ArrayList&lt;String&gt;
-start: int
--
+MenuItems(Level level, ArrayList&lt;String&gt; words, int start): ctor
+tick(): void
+render(Screen screen): void
+inputRun(InputHandler input): String
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>6880</x>
      <y>3340</y>
      <w>1560</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>loyal.level.tiles::AnimatedTile
--
-animationTileCoards: int[][]
-currentAnimationIndex: int
-lastIterationTime: long
-animationSwitchDelay: int
--
+AnimatedTile(int id, int[][] animationCoards, int tileColor, int levelColor, int animationSwitchDelay, int width, int height): ctor
+tick(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>8460</x>
      <y>3340</y>
      <w>1020</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>loyal.level.tiles::BasicTile
--
#tileId: int
#tileColor: int
~id: int
--
+BasicTile(int id, int x, int y, int tileColor, int levelColor, int width, int height): ctor
+tick(): void
+render(Screen screen, Level level, int x, int y): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>3680</y>
      <w>680</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
loyal.Battle.Actions::CharacterAction
--
--
+castCharacterAction(PlayingCharacter target): void
+getName(): String
+toString(): String
+getAbilityType(): AbilityType
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>700</x>
      <y>3680</y>
      <w>800</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Characters::Staff
--
-value = 2: int
-Str = Stat.STRENGTH, MPower = Stat.MAGICPOWER: Stat
--
+Staff(State innerState): ctor
+unSetModified(): void
+setModified(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1520</x>
      <y>3680</y>
      <w>640</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
loyal.Battle.Characters::State
--
--
~getStat(Stat health): double
~setStat(Stat health, double currentHealth): void
~getCurrentStatus(): double[]
~undecorate(String name): State
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2180</x>
      <y>3680</y>
      <w>400</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Characters::Sword
--
-value = 3: int
-Str = Stat.STRENGTH: Stat
--
+Sword(State innerState): ctor
+unSetModified(): void
+setModified(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2600</x>
      <y>3680</y>
      <w>800</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Characters::Wand
--
-value = 2: int
-Str = Stat.STRENGTH, MPower = Stat.MAGICPOWER: Stat
--
+Wand(State innerState): ctor
+unSetModified(): void
+setModified(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3420</x>
      <y>3680</y>
      <w>420</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>loyal.Graphics::SpriteSheet
--
+path: String
+width: int
+height: int
+pixels: int[]
--
+SpriteSheet(String path): ctor
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3860</x>
      <y>3680</y>
      <w>1440</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
loyal.Battle::BattleController
--
--
+setMenu(Level menu): void
+tick(ArrayList&lt;PlayingCharacter&gt; activePlayers, ArrayList&lt;PlayingCharacter&gt; activeEnemies): void
+updateBattleView(ArrayList&lt;PlayingCharacter&gt; activePlayers, ArrayList&lt;PlayingCharacter&gt; activeEnemies): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>5320</x>
      <y>3680</y>
      <w>520</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
loyal.Battle.Characters::StateDecorator
--
--
+undecorate(String name): State
~unSetModified(): void
~setModified(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>5860</x>
      <y>3680</y>
      <w>400</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
loyal.level::Decision
--
--
~update(): void
~sync(): void
~setGame(Loyal game): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>6280</x>
      <y>3680</y>
      <w>660</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>loyal.level::DecisionFactory
--
+ENTERBATTLE = new EnterBattle(): EnterBattle
-game: Loyal
--
+DecisionFactory(Loyal game): ctor
+init(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>6960</x>
      <y>3680</y>
      <w>1160</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
loyal.Battle.Actions::AbilityFactory
--
--
+createCharacterAction(String name, PlayingCharacter playingCharacter): CharacterAction
+displayAbilitiesBasedOnType(): String[]
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>8140</x>
      <y>3680</y>
      <w>900</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>loyal.entities::CharacterStore
--
-factory: SimpleCharacterFactory
--
+CharacterStore(SimpleCharacterFactory factory): ctor
+orderCharacter(String name, CharacterType type): PlayingCharacter
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>3980</y>
      <w>1020</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::AirSlashSingleTargetOffenSiveAbility
--
--
+AirSlashSingleTargetOffenSiveAbility(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1040</x>
      <y>3980</y>
      <w>1040</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::ArrowRainMultiTargetOffensiveAbility
--
--
+ArrowRainMultiTargetOffensiveAbility(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2100</x>
      <y>3980</y>
      <w>1060</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::BackSlashSingleTargetOffenSiveAbility
--
--
+BackSlashSingleTargetOffenSiveAbility(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3180</x>
      <y>3980</y>
      <w>1020</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::DarkOrbOffensiveSingleTargetAbility
--
--
+DarkOrbOffensiveSingleTargetAbility(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4220</x>
      <y>3980</y>
      <w>760</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>/loyal.Battle.Actions::DefensiveAbility/
--
--
+DefensiveAbility(PlayingCharacter playingCharacter): ctor
#canCastOn(PlayingCharacter target): boolean
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>5000</x>
      <y>3980</y>
      <w>780</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>/loyal.Battle.Actions::DeffensiveAbility/
--
--
+DeffensiveAbility(PlayingCharacter playingCharacter): ctor
#canCastOn(PlayingCharacter target): boolean
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>5800</x>
      <y>3980</y>
      <w>1100</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::DesperateMoveMultiTargetOffensiveAbility
--
--
+DesperateMoveMultiTargetOffensiveAbility(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>6920</x>
      <y>3980</y>
      <w>1040</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::LightningSpearOffensiveSingleTarget
--
--
+LightningSpearOffensiveSingleTarget(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>7980</x>
      <y>3980</y>
      <w>1080</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::MagicBarrierDefensiveSingleTargetAbility
--
--
+MagicBarrierDefensiveSingleTargetAbility(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>4180</y>
      <w>1080</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::MagicShieldDefensiveSingleTargetAbility
--
--
+MagicShieldDefensiveSingleTargetAbility(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1100</x>
      <y>4180</y>
      <w>900</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>/loyal.Battle.Actions::MultiTargetDefensiveAbility/
--
--
+MultiTargetDefensiveAbility(PlayingCharacter playingCharacter): ctor
#getTargets(PlayingCharacter target): ArrayList&lt;PlayingCharacter&gt;
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2020</x>
      <y>4180</y>
      <w>920</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>/loyal.Battle.Actions::MultiTargetDeffensiveAbility/
--
--
+MultiTargetDeffensiveAbility(PlayingCharacter playingCharacter): ctor
#getTargets(PlayingCharacter target): ArrayList&lt;PlayingCharacter&gt;
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2960</x>
      <y>4180</y>
      <w>900</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>/loyal.Battle.Actions::MultiTargetOffensiveAbility/
--
--
+MultiTargetOffensiveAbility(PlayingCharacter playingCharacter): ctor
#getTargets(PlayingCharacter target): ArrayList&lt;PlayingCharacter&gt;
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3880</x>
      <y>4180</y>
      <w>760</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>/loyal.Battle.Actions::OffensiveAbility/
--
--
+OffensiveAbility(PlayingCharacter playingCharacter): ctor
#canCastOn(PlayingCharacter target): boolean
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4660</x>
      <y>4180</y>
      <w>1080</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::PoisonousStabMultiTargetOffensiveAbility
--
--
+PoisonousStabMultiTargetOffensiveAbility(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>5760</x>
      <y>4180</y>
      <w>1060</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::SacredOathMultiTargetDefensiveAbility
--
--
+SacredOathMultiTargetDefensiveAbility(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>6840</x>
      <y>4180</y>
      <w>1040</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::SharpEyeDefensiveSingleTargetAbility
--
--
+SharpEyeDefensiveSingleTargetAbility(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>7900</x>
      <y>4180</y>
      <w>1060</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::SharpShotOffensiveSingleTargetAbility
--
--
+SharpShotOffensiveSingleTargetAbility(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>4380</y>
      <w>920</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>/loyal.Battle.Actions::SingleTargetDefensiveAbility/
--
--
+SingleTargetDefensiveAbility(PlayingCharacter playingCharacter): ctor
#getTargets(PlayingCharacter target): ArrayList&lt;PlayingCharacter&gt;
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>940</x>
      <y>4380</y>
      <w>920</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>/loyal.Battle.Actions::SingleTargetOffensiveAbility/
--
--
+SingleTargetOffensiveAbility(PlayingCharacter playingCharacter): ctor
#getTargets(PlayingCharacter target): ArrayList&lt;PlayingCharacter&gt;
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1880</x>
      <y>4380</y>
      <w>1120</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::SootingSunlightDefensiveSingleTargetAbility
--
--
+SootingSunlightDefensiveSingleTargetAbility(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3020</x>
      <y>4380</y>
      <w>980</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::SoulArrowOffensiveSingleTarget
--
--
+SoulArrowOffensiveSingleTarget(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4020</x>
      <y>4380</y>
      <w>1060</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::SoulShowerMultiTargetOffensiveAbility
--
--
+SoulShowerMultiTargetOffensiveAbility(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>5100</x>
      <y>4380</y>
      <w>1000</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::TauntSingleTargetDefenSiveAbility
--
--
+TauntSingleTargetDefenSiveAbility(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>6120</x>
      <y>4380</y>
      <w>1000</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::TauntSingleTargetDeffenSiveAbility
--
--
+TauntSingleTargetDeffenSiveAbility(PlayingCharacter playingCharacter): ctor
#applyAbility(ArrayList&lt;PlayingCharacter&gt; targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>7140</x>
      <y>4380</y>
      <w>920</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
loyal.Battle.Characters::Interactable
--
--
+Interaction(PlayingCharacter sources, PlayingCharacter[] targets): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>4580</y>
      <w>660</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Graphics::Colors
--
--
+get(int color1, int color2, int color3, int color4): int
-get(int color): int
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>680</x>
      <y>4580</y>
      <w>1240</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>loyal.Graphics::Font
--
-chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ      " + "0123456789.,:;'\"!?$%()-=+/      ": String
--
+render(String msg, Screen screen, int x, int y, int color, int scale): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1940</x>
      <y>4580</y>
      <w>360</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>loyal.Battle.Actions::Tester
--
--
+main(String[] args): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2320</x>
      <y>4580</y>
      <w>620</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>loyal.entities::Cleric
--
--
+Cleric(String name, CharacterType type): ctor
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2960</x>
      <y>4580</y>
      <w>620</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>loyal.entities::Hunter
--
--
+Hunter(String name, CharacterType type): ctor
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3600</x>
      <y>4580</y>
      <w>920</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>loyal.entities::SimpleCharacterFactory
--
--
+createCharacter(String name, CharacterType type): PlayingCharacter
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4540</x>
      <y>4580</y>
      <w>640</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>loyal.entities::Warrior
--
--
+Warrior(String name, CharacterType type): ctor
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>5200</x>
      <y>4580</y>
      <w>640</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>loyal.entities::Wizzard
--
--
+Wizzard(String name, CharacterType type): ctor
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>5860</x>
      <y>4600</y>
      <w>1080</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>loyal.level.tiles::BasicSolidTile
--
--
+BasicSolidTile(int id, int x, int y, int tileColor, int levelColor, int width, int height): ctor
--
</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
